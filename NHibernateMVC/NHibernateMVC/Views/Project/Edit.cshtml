@using Castle.Core.Internal
@model NHibernateMVC.Models.Project.ProjectViewModel
@{
    ViewBag.Title = "Edit";
}

@using (Html.BeginForm("Update", "Project", FormMethod.Post, new { @class = "form-horizontal" }))
{
    <fieldset>
        <legend>Edit Project</legend>
        <div class="row-fluid">
            <div class="span12">
                <div class="control-group">
                    <div class="controls">
                        @Html.Label("ProjectId")
                        @Html.TextBoxFor(m => m.ProjectForm.ProjectId, new { @readonly = true })
                    </div>
                </div>
            </div>
        </div>
        <div class="row-fluid">
            <div class="span12">
                <div class="control-group">
                    <div class="controls">
                        @Html.Label("Project Name")
                        @Html.TextBoxFor(m => m.ProjectForm.ProjectName)
                    </div>
                </div>
            </div>
        </div>
    </fieldset>

    <fieldset>
        <legend>Employees in the project</legend>
        <div class="row-fluid">
            <div class="span12">
                <div class="control-group">
                    <div class="controls">
                        @Html.Label("Employee")
                        @Html.DropDownListFor(x => x.ProjectForm.EmployeeGuidToDb, Model.ProjectForm.EmployeesList.Select(z => new SelectListItem { Text = z.FirstName + " " + z.LastName, Value = z.EmployeeId.ToString(), Selected = false }), "---SELECT---", new { id = "EmplyoeeDownListSelect" })
                        <div id="addBtn">
                            <input class="btn btn-info" type="button" id="btnClick" value="Add"/>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </fieldset>
    
    if (Model.ProjectForm.List.IsNullOrEmpty())
    {
    <div class="span10">
        <div class="control-group">
            <div class="controls">
                <div class="alert alert-warning" role="alert">
                    <p>Empty Project</p>
                </div>
            </div>
        </div>
    </div>
    }
    if (!Model.ProjectForm.List.IsNullOrEmpty())
    {
    <div class="span12">
        <div class="panel panel-default">
            <table class="table table-bordered table-hover">
                <thead>
                    <tr>
                        <th>Employee ID</th>
                        <th>Employee Name</th>
                        <th>#</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in Model.ProjectForm.List)
                    {
                        <tr>
                            <td>@item.EmployeeId</td>
                            <td>@item.FirstName @item.LastName</td>
                            <td>
                                <a class="btn btn-mini" href="@Url.Action("Edit", "Employee", new { employeeId = @item.EmployeeId })"><i class="glyphicon glyphicon-edit"></i>Edit</a>
                                <a class="btn btn-mini" href="@Url.Action("DeleteEmployeeFromProject", "Project", new { employeeId = item.EmployeeId, projectId = Model.ProjectForm.ProjectId })" ><i class="glyphicon glyphicon-random"></i>Delete</a>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
    }
    <br />
    <br />
    <br />
    <div class="span 2">
        <div class="control-group">
            <input type="submit" value="Save" class="btn btn-primary" />
        </div>
    </div>
    
}

<script type="text/javascript">
    $("#btnClick").click(function() {
        var value = $('#EmplyoeeDownListSelect').val();
        $.ajax({
            url: "@Url.Action("AddEmplyoeeToProject","Project")",
            type: "GET",
            data:
            {
                employeeId: value,
                projectId: "@Model.ProjectForm.ProjectId"
            },
            success: function () {
                location.reload();
            },
            error: function (xhr, status, error) {
                var err = eval("(" + xhr.responseText + ")");
                alert(err.Message);
            }
        });
    })
</script>